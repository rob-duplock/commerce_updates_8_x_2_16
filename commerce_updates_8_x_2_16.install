<?php

/**
 * @file
 * Install, update and uninstall functions for the Order module.
 */

use Drupal\commerce_store\Entity\Store;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_install().
 */
function commerce_updates_8_x_2_16_install() {
  commerce_updates_8_x_2_16_update_8001();
  commerce_updates_8_x_2_16_update_8002();
  commerce_updates_8_x_2_16_update_8003();
  commerce_updates_8_x_2_16_update_8004();
  commerce_updates_8_x_2_16_update_8005();
  commerce_updates_8_x_2_16_update_8006();
  commerce_updates_8_x_2_16_update_8007();
}

/**
 * Convert the 'order_items' configurable field into a base field.
 */
function commerce_updates_8_x_2_16_update_8001() {
  $bundle_info = \Drupal::service('entity_type.bundle.info')->getBundleInfo('commerce_order');
  $order_types = array_keys($bundle_info);
  $config_factory = \Drupal::configFactory();
  $config_manager = \Drupal::service('config.manager');
  $entity_type_manager = \Drupal::entityTypeManager();
  $entity_field_manager = \Drupal::service('entity_field.manager');

  $entity_type_manager->clearCachedDefinitions();
  $entity_field_manager->clearCachedFieldDefinitions();

  $key = 'commerce_order.field_storage_definitions';
  $entity_definitions_installed = \Drupal::keyValue('entity.definitions.installed');
  $definitions = $entity_definitions_installed->get($key);
  /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $base_field_definitions */
  $base_field_definitions = $entity_field_manager->getBaseFieldDefinitions('commerce_order');
  $definitions['order_items'] = $base_field_definitions['order_items']->getFieldStorageDefinition();
  $entity_definitions_installed->set($key, $definitions);

  $configuration_to_delete = [];
  foreach ($order_types as $bundle) {
    $configuration_to_delete[] = 'field.field.commerce_order.' . $bundle . '.order_items';
  }
  $configuration_to_delete[] = 'field.storage.commerce_order.order_items';

  $dependents = $config_manager->findConfigEntityDependents('config', $configuration_to_delete);
  /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $config_entity */
  foreach ($dependents as $config_name => $config_entity) {
    $config_entity = $config_factory->getEditable($config_name);
    $dependencies = $config_entity->get('dependencies.config');
    $dependencies = array_diff($dependencies, $configuration_to_delete);
    $config_entity->set('dependencies.config', $dependencies);
    $config_entity->save();
  }

  foreach ($configuration_to_delete as $config) {
    $config_factory->getEditable($config)->delete();
  }

  drupal_flush_all_caches();
}

/**
 * Update all existing views using a reference to order items.
 */
function commerce_updates_8_x_2_16_update_8002() {
  $config_factory = \Drupal::configFactory();
  foreach ($config_factory->listAll('views.view.') as $view_config_name) {
    $view = $config_factory->getEditable($view_config_name);
    if ($view->get('base_field') != 'order_id') {
      // Not a commerce_order SQL view.
      continue;
    }

    $displays = $view->get('display');
    foreach ($displays as $display_name => $display) {
      if (!empty($display['display_options']['relationships'])) {
        foreach ($display['display_options']['relationships'] as $relationship_name => $relationship) {
          if ($relationship_name == 'order_items') {
            // Update the relation field and add entity information.
            $base = "display.$display_name.display_options.relationships.$relationship_name";
            $view->set($base . '.field', $relationship_name . '_target_id');
            $view->set($base . '.entity_type', 'commerce_order');
            $view->set($base . '.entity_field', $relationship_name);
          }
        }
      }

      if (!empty($display['display_options']['fields'])) {
        foreach ($display['display_options']['fields'] as $field_name => $field) {
          if ($field_name == 'order_items') {
            // Update the relation field and add entity information.
            $base = "display.$display_name.display_options.fields.$field_name";
            $view->set($base . '.field', $field_name . '_target_id');
          }
        }
      }
    }
    $view->save(TRUE);
  }
  drupal_flush_all_caches();
}


/**
 * Convert 'stores' and 'variations' configurable fields into base fields.
 */
function commerce_updates_8_x_2_16_update_8003() {
  $bundle_info = \Drupal::service('entity_type.bundle.info')->getBundleInfo('commerce_product');
  $product_types = array_keys($bundle_info);
  $config_factory = \Drupal::configFactory();
  $config_manager = \Drupal::service('config.manager');
  $entity_type_manager = \Drupal::entityTypeManager();
  $entity_field_manager = \Drupal::service('entity_field.manager');

  $entity_type_manager->clearCachedDefinitions();
  $entity_field_manager->clearCachedFieldDefinitions();

  $key = 'commerce_product.field_storage_definitions';
  $entity_definitions_installed = \Drupal::keyValue('entity.definitions.installed');
  $definitions = $entity_definitions_installed->get($key);
  /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $base_field_definitions */
  $base_field_definitions = $entity_field_manager->getBaseFieldDefinitions('commerce_product');
  $definitions['stores'] = $base_field_definitions['stores']->getFieldStorageDefinition();
  $definitions['variations'] = $base_field_definitions['variations']->getFieldStorageDefinition();
  $entity_definitions_installed->set($key, $definitions);

  $configuration_to_delete = [];
  foreach ($product_types as $bundle) {
    $configuration_to_delete[] = 'field.field.commerce_product.' . $bundle . '.stores';
    $configuration_to_delete[] = 'field.field.commerce_product.' . $bundle . '.variations';
  }
  $configuration_to_delete[] = 'field.storage.commerce_product.stores';
  $configuration_to_delete[] = 'field.storage.commerce_product.variations';

  $dependents = $config_manager->findConfigEntityDependents('config', $configuration_to_delete);
  /** @var \Drupal\Core\Config\Entity\ConfigEntityInterface $config_entity */
  foreach ($dependents as $config_name => $config_entity) {
    $config_entity = $config_factory->getEditable($config_name);
    $dependencies = $config_entity->get('dependencies.config');
    $dependencies = array_diff($dependencies, $configuration_to_delete);
    $config_entity->set('dependencies.config', $dependencies);
    $config_entity->save();
  }

  foreach ($configuration_to_delete as $config) {
    $config_factory->getEditable($config)->delete();
  }
  drupal_flush_all_caches();
}

/**
 * Update all existing views using a reference to stores or variations.
 */
function commerce_updates_8_x_2_16_update_8004() {
  $config_factory = \Drupal::configFactory();
  foreach ($config_factory->listAll('views.view.') as $view_config_name) {
    $view = $config_factory->getEditable($view_config_name);
    if (!in_array($view->get('base_field'), ['product_id', 'variation_id'])) {
      // Not a commerce_product / commerce_product_variation SQL view.
      continue;
    }

    $displays = $view->get('display');
    foreach ($displays as $display_name => $display) {
      if (!empty($display['display_options']['relationships'])) {
        foreach ($display['display_options']['relationships'] as $relationship_name => $relationship) {
          if ($relationship_name == 'stores' || $relationship_name == 'variations') {
            // Update the relation field and add entity information.
            $base = "display.$display_name.display_options.relationships.$relationship_name";
            $view->set($base . '.field', $relationship_name . '_target_id');
            $view->set($base . '.entity_type', 'commerce_product');
            $view->set($base . '.entity_field', $relationship_name);
          }
        }
      }

      if (!empty($display['display_options']['fields'])) {
        foreach ($display['display_options']['fields'] as $field_name => $field) {
          if ($field_name == 'stores' || $field_name == 'variations') {
            // Update the relation field and add entity information.
            $base = "display.$display_name.display_options.fields.$field_name";
            $view->set($base . '.field', $field_name . '_target_id');
          }
        }
      }
    }
    $view->save(TRUE);
  }
  drupal_flush_all_caches();
}

function commerce_updates_8_x_2_16_update_8005() {
  $config_factory = \Drupal::configFactory();
  foreach ($config_factory->listAll('views.view.') as $view_config_name) {
    $view = $config_factory->getEditable($view_config_name);
    if (!in_array($view->get('base_field'), ['product_id', 'variation_id'])) {
      // Not a commerce_product / commerce_product_variation SQL view.
      continue;
    }

    $displays = $view->get('display');
    foreach ($displays as $display_name => $display) {
      if (!empty($display['display_options']['relationships'])) {
        foreach ($display['display_options']['relationships'] as $relationship_name => $relationship) {
          if ($relationship_name == 'stores' || $relationship_name == 'variations') {
            // Update the relation field and add entity information.
            $base = "display.$display_name.display_options.relationships.$relationship_name";
            $view->set($base . '.field', $relationship_name . '_target_id');
            $view->set($base . '.entity_type', 'commerce_product');
            $view->set($base . '.entity_field', $relationship_name);
          }
        }
      }

      if (!empty($display['display_options']['fields'])) {
        foreach ($display['display_options']['fields'] as $field_name => $field) {
          if ($field_name == 'stores' || $field_name == 'variations') {
            // Update the relation field and add entity information.
            $base = "display.$display_name.display_options.fields.$field_name";
            $view->set($base . '.field', $field_name . '_target_id');
          }
        }
      }
    }
    $view->save(TRUE);
  }
  drupal_flush_all_caches();
}

/**
 * Add the 'is_default' field to stores.
 */
function commerce_updates_8_x_2_16_update_8006() {
  $storage_definition = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Default'))
    ->setDescription(t('Whether this is the default store.'))
    ->setDefaultValue(FALSE)
    ->setDisplayOptions('form', [
      'type' => 'boolean_checkbox',
      'settings' => [
        'display_label' => TRUE,
      ],
      'weight' => 90,
    ])
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  $update_manager = \Drupal::entityDefinitionUpdateManager();
  $update_manager->installFieldStorageDefinition('is_default', 'commerce_store', 'commerce_store', $storage_definition);
  drupal_flush_all_caches();
}

/**
 * Add the timezone field to stores.
 */
function commerce_updates_8_x_2_16_update_8007() {
  $site_timezone = Store::getSiteTimezone();
  $site_timezone = reset($site_timezone);
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();

  $storage_definition = BaseFieldDefinition::create('list_string')
    ->setLabel(t('Timezone'))
    ->setDescription(t('Used when determining promotion and tax availability.'))
    ->setInitialValue($site_timezone)
    ->setCardinality(1)
    ->setRequired(TRUE)
    ->setDefaultValueCallback('Drupal\commerce_store\Entity\Store::getSiteTimezone')
    ->setSetting('allowed_values_function', ['\Drupal\commerce_store\Entity\Store', 'getTimezones'])
    ->setDisplayOptions('form', [
      'type' => 'options_select',
      'weight' => 3,
    ])
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', TRUE);

  $definition_update_manager->installFieldStorageDefinition('timezone', 'commerce_store', 'commerce_store', $storage_definition);
  drupal_flush_all_caches();
}
